@use "./variable" as v;
// @use "./function" as f;

/* ----------------------------------------------------------------------
SASSのミックスインをまとめるためのファイルです。
※CSSの慣例を踏襲し、変数の命名にはハイフンケースを使用。
---------------------------------------------------------------------- */

/* ----------------------------------------------------------------------
レスポンシブ対応用のミックスイン。@include media(デバイス名) {}で使用します。
---------------------------------------------------------------------- */
$breakpoints: (
  sp: "screen and (max-width: #{v.$sp-max})",
  tab: "screen and (max-width: #{v.$tab-max})",
  pc: "screen and (min-width: #{v.$pc-min})",
);

@mixin media($device) {
  @media #{map-get($breakpoints, $device)} {
    @content;
  }
}

/* ----------------------------------------------------------------------
画面幅を直接指定してレスポンシブ対応するミックスイン。
---------------------------------------------------------------------- */

@mixin max-width($max-width) {
  // 単位が省略された場合は、自動的に'px'を補完。
  $max-width: if(unitless($max-width), #{$max-width + "px"}, $max-width);

  @media (max-width: $max-width) {
    @content;
  }
}

@mixin min-width($min-width) {
  // 単位が省略された場合は、自動的に'px'を補完。
  $min-width: if(unitless($min-width), #{$min-width + "px"}, $min-width);

  @media (min-width: $min-width) {
    @content;
  }
}

/* ----------------------------------------------------------------------
ウィンドウリサイズに追従する滑らかなwrapperを実現するためのミックスイン。第二引数はnullとすることが可能。
スクロールバー幅の計算処理が含まれるため、画面横幅いっぱいの要素にのみ使用すること。
（使用例）
@include m.smooth-wrap(90%, null, (85%, 1200px));
@include m.smooth-wrap(90%, 85%, (80%, 1000px));
---------------------------------------------------------------------- */

// @mixin smooth-wrap($sp-width, $tab-width, $pc-width) {
//     $pc-min: nth($pc-width, 1);
//     $pc-max: nth($pc-width, 2);

//     width: min($pc-min, $pc-max);
//     margin-inline: auto;

//     @if $tab-width {
//         @include media(tab) {
//             width: min($tab-width, (#{v.$tab-max} - #{v.$scrollbar-width}) * ($pc-min / 100%));
//         }

//         @include media(sp) {
//             width: min($sp-width, (#{v.$sp-max} - #{v.$scrollbar-width}) * ($tab-width / 100%));
//         }
//     }

//     @else {
//         @include media(sp) {
//             width: min($sp-width, (#{v.$sp-max} - #{v.$scrollbar-width}) * ($pc-min / 100%));
//         }
//     }
// }

/* ----------------------------------------------------------------------
上下の辺が斜めにclipされた要素を実装するためのミックスイン。

（使用例）
@include m.diagonal-bg(); // 引数を全て省略し、デフォルト値を使用。
@include m.diagonal-bg(top); // 斜めにしたい辺を指定。有効値：top, bottom, both。
@include m.diagonal-bg(bottom, 50px); // padding-blockを指定。値が1つの場合は、padding-topとpadding-bottom両方に同じ値が適用される。
@include m.diagonal-bg(both, 50px 25px); // padding-blockとして2つの値を指定。それぞれpadding-topとpadding-bottomとして適用。。
@include m.diagonal-bg(both, (50px 25px)); // 特に意味は無いが、padding-block値は()で括ることも可能。
@include m.diagonal-bg(both, 50px, 15vw); // 傾斜角度を左右する、vw値を指定。値が大きいほど傾斜が急になる。
@include m.diagonal-bg(both, 50px, 15vw, 100px); // 傾斜によって生じる高さの最大値を指定。それ以上は増えなくなるため、一定の画面幅に達すると傾斜角度は緩やかになる。
@include m.diagonal-bg(both, 50px, 15vw, null); // 傾斜によって生じる高さの最大値をnullとすることで、最大値には100vhが適用される。
@include m.diagonal-bg(both, 50px, 15vw, 100px, to-bottom-right); // 傾斜がどこへ向かうのかを指定。有効値：to-top-right, to-top-left, to-bottom-right, to-bottom-left。
// その他、「$引数: 値」と記述して部分的に引数を渡すことが可能。
---------------------------------------------------------------------- */

// @mixin diagonal-bg($target-side: "both", $fixed-padding-block: var(--sect-pad), $height-in-vw: 7.5vw, $max-height: 100px, $direction: "to-top-right") {
@mixin diagonal-bg(
  $target-side: "both",
  $fixed-padding-block: var(--sect-pad),
  $height-in-vw: v.$diagonal-bg-default-vw,
  $max-height: v.$diagonal-bg-default-max-height,
  $direction: "to-top-right"
) {
  // $max-heightにnullが代入された場合は、100vhと見なすことで、実質無制限に傾きを許容する。
  $max-height: if($max-height ==null, 100vh, $max-height);

  // $directionに応じて、各辺のclip-path値を定義。
  $top-side: null;
  $bottom-side: null;

  @if $direction == "to-top-right" or $direction == "to-bottom-left" {
    $top-side: 0 min($height-in-vw, $max-height), 100% 0;
    $bottom-side: 100% calc(100% - min($height-in-vw, $max-height)), 0 100%;
  } @else if $direction == "to-top-left" or $direction == "to-bottom-right" {
    $top-side: 0 0, 100% min($height-in-vw, $max-height);
    $bottom-side: 100% 100%, 0 calc(100% - min($height-in-vw, $max-height));
  }

  // $target-sideに応じて、スタイルを適用。
  $padding-top: nth($fixed-padding-block, 1);
  $padding-bottom: if(
    length($fixed-padding-block) > 1,
    nth($fixed-padding-block, 2),
    $padding-top
  ); // $fixed-padding-blockに値が2つあれば2つ目を、1つしかなければ1つ目をpadding-bottomに適用する。

  @if $target-side== "top" {
    clip-path: polygon($top-side, 100% 100%, 0 100%);
    padding-top: calc(min($height-in-vw, $max-height) + $padding-top);
    padding-bottom: $padding-bottom;
  } @else if $target-side== "bottom" {
    clip-path: polygon(0 0, 100% 0, $bottom-side);
    padding-top: $padding-top;
    padding-bottom: calc(min($height-in-vw, $max-height) + $padding-bottom);
    margin-bottom: calc(min($height-in-vw, $max-height) * -1);
  } @else if $target-side== "both" {
    clip-path: polygon($top-side, $bottom-side);
    padding-top: calc(min($height-in-vw, $max-height) + $padding-top);
    padding-bottom: calc(min($height-in-vw, $max-height) + $padding-bottom);
    margin-bottom: calc(min($height-in-vw, $max-height) * -1);
  }
}

/* ----------------------------------------------------------------------
タイポグラフィー： font-familyやfont-style、font-weightをまとめて定義し、一括指定するミックスイン。
（使用例）
@include m.font(playfair);
---------------------------------------------------------------------- */

// $font-types: (
//     base: (font-family: (v.$ff--base),
//         font-style: normal,
//         font-weight: normal,
//     ),
//     playfair: (font-family: (v.$ff--playfair),
//         font-style: italic, // 2023.10.31現時点、Chromeではデフォルトで斜体となるが、Safariではitalicを指定しない限り斜体にならない模様。
//         font-weight: normal,
//     )
// );

// // 引数が空の場合はbaseを適用。
// @mixin font($type: base, $style: null, $weight: null) {
//     $style-config: map-get($font-types, $type);

//     @if $style-config {
//         font-family: map-get($style-config, 'font-family');
//         font-style: if($style, $style, map-get($style-config, 'font-style'));
//         font-weight: if($weight, $weight, map-get($style-config, 'font-weight'));
//     }
// }

/* ----------------------------------------------------------------------
タイポグラフィー：英語斜体＆日本語のセクション見出し。section-heading-言語($color)で使用。
2024.01.18以降、使用廃止。新しいミックスインで対応予定&過去の記述も順次差し替え予定。
---------------------------------------------------------------------- */

// $section-heading-colors: (
//     red: #{v.$red},
//     vivid-pink: #{v.$vivid-pink},
//     orange: #{v.$orange},
//     orange-yellow: #{v.$orange-yellow},
//     beige: #{v.$beige},
//     white: white,
//     black: black,
// );

// @mixin section-heading-en($color: red) {
//     display: inline-block;
//     font-family: "Playfair Display", serif;
//     font-style: italic; // 2023.10.31現時点、Chromeではデフォルトで斜体となるが、Safariではitalicを指定しない限り斜体にならない模様。
//     // font-sizeはコンテキストに応じて上書き可。
//     font-size: clamp(4.4rem, 8vw, 8.2rem);
//     color: map-get($section-heading-colors, $color);
//     padding-bottom: 0.05em;
// }

// @mixin section-heading-jp($color: black) {
//     // font-sizeはコンテキストに応じて上書き可。
//     font-size: clamp(1.8rem, 3.3vw, 3.3rem);
//     font-weight: 600;
//     color: map-get($section-heading-colors, $color);
// }

/* ----------------------------------------------------------------------
【試験運用中】 タイポグラフィー：セクション見出し（2024.01.18更新）
---------------------------------------------------------------------- */

// @mixin heading-container($base-font-size) {
//     --heading-base-size: #{$base-font-size}; // 小さい方の見出しサイズを定義。大きい方はemで相対指定/font-sizeを上書き。
//     font-size: var(--heading-base-size);
//     word-break: keep-all; // 見出しの折り返し位置を指定したい場合は、各文中に<wbr>を挿入。
// }

// @mixin en-heading($color) {
//     color: $color;
//     font-weight: bold;
// }

// @mixin jp-heading($color) {
//     color: $color;
//     font-weight: 600;
//     line-height: 1.35; // 日本語見出しは折り返しが発生する可能性があるため、デフォルトのline-heightを指定。
// }
